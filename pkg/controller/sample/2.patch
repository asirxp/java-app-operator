--- sample_controller.go.old	2020-07-09 16:16:42.748444833 +0800
+++ sample_controller.go	2020-07-09 16:42:12.001353683 +0800
@@ -2,8 +2,10 @@
 
 import (
 	"context"
+        "reflect"
 
 	devopsv1alpha1 "github.com/asirxing/java-app-operator/pkg/apis/devops/v1alpha1"
+        appsv1 "k8s.io/api/apps/v1"
 	corev1 "k8s.io/api/core/v1"
 	"k8s.io/apimachinery/pkg/api/errors"
 	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
@@ -53,7 +55,7 @@
 
 	// TODO(user): Modify this to be the types you create that are owned by the primary resource
 	// Watch for changes to secondary resource Pods and requeue the owner Sample
-	err = c.Watch(&source.Kind{Type: &corev1.Pod{}}, &handler.EnqueueRequestForOwner{
+	err = c.Watch(&source.Kind{Type: &appsv1.Deployment{}}, &handler.EnqueueRequestForOwner{
 		IsController: true,
 		OwnerType:    &devopsv1alpha1.Sample{},
 	})
@@ -87,8 +89,8 @@
 	reqLogger.Info("Reconciling Sample")
 
 	// Fetch the Sample instance
-	instance := &devopsv1alpha1.Sample{}
-	err := r.client.Get(context.TODO(), request.NamespacedName, instance)
+	sample := &devopsv1alpha1.Sample{}
+	err := r.client.Get(context.TODO(), request.NamespacedName, sample)
 	if err != nil {
 		if errors.IsNotFound(err) {
 			// Request object not found, could have been deleted after reconcile request.
@@ -100,54 +102,119 @@
 		return reconcile.Result{}, err
 	}
 
-	// Define a new Pod object
-	pod := newPodForCR(instance)
-
-	// Set Sample instance as the owner and controller
-	if err := controllerutil.SetControllerReference(instance, pod, r.scheme); err != nil {
+	// Check if the deployment already exists, if not create a new one
+	found := &appsv1.Deployment{}
+	err = r.client.Get(context.TODO(), types.NamespacedName{Name: sample.Name, Namespace: sample.Namespace}, found)
+	if err != nil && errors.IsNotFound(err) {
+		// Define a new deployment
+		dep := r.deploymentForSample(sample)
+		reqLogger.Info("Creating a new Deployment", "Deployment.Namespace", dep.Namespace, "Deployment.Name", dep.Name)
+		err = r.client.Create(context.TODO(), dep)
+		if err != nil {
+			reqLogger.Error(err, "Failed to create new Deployment", "Deployment.Namespace", dep.Namespace, "Deployment.Name", dep.Name)
+			return reconcile.Result{}, err
+		}
+		// Deployment created successfully - return and requeue
+		return reconcile.Result{Requeue: true}, nil
+	} else if err != nil {
+		reqLogger.Error(err, "Failed to get Deployment")
 		return reconcile.Result{}, err
 	}
 
-	// Check if this Pod already exists
-	found := &corev1.Pod{}
-	err = r.client.Get(context.TODO(), types.NamespacedName{Name: pod.Name, Namespace: pod.Namespace}, found)
-	if err != nil && errors.IsNotFound(err) {
-		reqLogger.Info("Creating a new Pod", "Pod.Namespace", pod.Namespace, "Pod.Name", pod.Name)
-		err = r.client.Create(context.TODO(), pod)
+	// Ensure the deployment size is the same as the spec
+	size := sample.Spec.Size
+	if *found.Spec.Replicas != size {
+		found.Spec.Replicas = &size
+		err = r.client.Update(context.TODO(), found)
 		if err != nil {
+			reqLogger.Error(err, "Failed to update Deployment", "Deployment.Namespace", found.Namespace, "Deployment.Name", found.Name)
 			return reconcile.Result{}, err
 		}
+		// Spec updated - return and requeue
+		return reconcile.Result{Requeue: true}, nil
+	}
 
-		// Pod created successfully - don't requeue
-		return reconcile.Result{}, nil
-	} else if err != nil {
+	// Update the Sample status with the pod names
+	// List the pods for this Sample's deployment
+	podList := &corev1.PodList{}
+	listOpts := []client.ListOption{
+		client.InNamespace(sample.Namespace),
+		client.MatchingLabels(labelsForSample(sample.Name)),
+	}
+	if err = r.client.List(context.TODO(), podList, listOpts...); err != nil {
+		reqLogger.Error(err, "Failed to list pods", "Sample.Namespace", sample.Namespace, "Sample.Name", sample.Name)
 		return reconcile.Result{}, err
 	}
+	podNames := getPodNames(podList.Items)
+
+	// Update status.Nodes if needed
+	if !reflect.DeepEqual(podNames, sample.Status.Nodes) {
+		sample.Status.Nodes = podNames
+		err := r.client.Status().Update(context.TODO(), sample)
+		if err != nil {
+			reqLogger.Error(err, "Failed to update Sample status")
+			return reconcile.Result{}, err
+		}
+	}
 
-	// Pod already exists - don't requeue
-	reqLogger.Info("Skip reconcile: Pod already exists", "Pod.Namespace", found.Namespace, "Pod.Name", found.Name)
 	return reconcile.Result{}, nil
 }
 
-// newPodForCR returns a busybox pod with the same name/namespace as the cr
-func newPodForCR(cr *devopsv1alpha1.Sample) *corev1.Pod {
-	labels := map[string]string{
-		"app": cr.Name,
-	}
-	return &corev1.Pod{
+// deploymentForSample returns a sample Deployment object
+func (r *ReconcileSample) deploymentForSample(m *devopsv1alpha1.Sample) *appsv1.Deployment {
+	ls := labelsForSample(m.Name)
+	replicas := m.Spec.Size
+
+	dep := &appsv1.Deployment{
 		ObjectMeta: metav1.ObjectMeta{
-			Name:      cr.Name + "-pod",
-			Namespace: cr.Namespace,
-			Labels:    labels,
+			Name:      m.Name,
+			Namespace: m.Namespace,
 		},
-		Spec: corev1.PodSpec{
-			Containers: []corev1.Container{
-				{
-					Name:    "busybox",
-					Image:   "busybox",
-					Command: []string{"sleep", "3600"},
+		Spec: appsv1.DeploymentSpec{
+			Replicas: &replicas,
+			Selector: &metav1.LabelSelector{
+				MatchLabels: ls,
+			},
+			Template: corev1.PodTemplateSpec{
+				ObjectMeta: metav1.ObjectMeta{
+					Labels: ls,
+				},
+				Spec: corev1.PodSpec{
+					Containers: []corev1.Container{{
+						Image:   m.Spec.Image,
+						Name:    "sample",
+						Ports: []corev1.ContainerPort{{
+							ContainerPort: 8080,
+							Name:          "sample",
+                                                        Protocol: "TCP",
+						}},
+                                               Env: []corev1.EnvVar{{
+                                                        Name: "CAMEL_SETBODY",
+                                                        Value: m.Spec.BodyValue,
+						}},
+					}},
 				},
 			},
 		},
 	}
+	// Set Sample instance as the owner and controller
+	controllerutil.SetControllerReference(m, dep, r.scheme)
+	return dep
+}
+
+// labelsForTEst returns the labels for selecting the resources
+// belonging to the given sample CR name.
+func labelsForSample(name string) map[string]string {
+	return map[string]string{"app": "sample", "sample_cr": name}
+}
+
+// getPodNames returns the pod names of the array of pods passed in
+func getPodNames(pods []corev1.Pod) []string {
+	var podNames []string
+	for _, pod := range pods {
+		podNames = append(podNames, pod.Name)
+	}
+	return podNames
 }
+
+
